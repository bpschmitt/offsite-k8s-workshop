{
    "componentChunkName": "component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js",
    "path": "/exercises/05_pomi",
    "result": {"data":{"mdx":{"id":"7a7f7ab1-e579-5edf-b5c0-67101192e52f","excerpt":"04. Working with the Prometheus OpenMetrics Integration (POMI) Prometheus metrics are a standard when it comes to Kubernetes clusters.  Many resources in aâ€¦","fields":{"slug":"/exercises/05_pomi/"},"frontmatter":{"title":"","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"04-working-with-the-prometheus-openmetrics-integration-pomi\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#04-working-with-the-prometheus-openmetrics-integration-pomi\",\n    \"aria-label\": \"04 working with the prometheus openmetrics integration pomi permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"04. Working with the Prometheus OpenMetrics Integration (POMI)\"), mdx(\"p\", null, \"Prometheus metrics are a standard when it comes to Kubernetes clusters.  Many resources in a cluster expose Prometheus metrics using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/metrics\"), \" endpoint.  Solutions like New Relic, Prometheus Server, and others are able to \\\"scrape\\\" these endpoints and collect metrics at various intervals.\"), mdx(\"p\", null, \"One of the main sources of metrics for New Relic's Infrastructure agent is Kube State Metrics (KSM).  This is an optional install as part of the Guided Install and often times, a KSM instance may already exist in the cluster.\"), mdx(\"h2\", {\n    \"id\": \"raw-metrics-exposed-by-endpoints\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#raw-metrics-exposed-by-endpoints\",\n    \"aria-label\": \"raw metrics exposed by endpoints permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Raw metrics exposed by endpoints\"), mdx(\"p\", null, \"Use the following command to identify the name of the KSM service in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"newrelic\"), \" name space.  Note that this service is exposing port 8080.  You'll need this in the next command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get svc -n newrelic\\nNAME                                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\\nnewrelic-bundle-kube-state-metrics       ClusterIP   10.107.95.111   <none>        8080/TCP   15h\\nnewrelic-bundle-nri-metadata-injection   ClusterIP   10.105.206.11   <none>        443/TCP    15h\\n\")), mdx(\"p\", null, \"By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubectl port-forward\"), \", you can forward ports from your local machine to cluster end points like the KSM service.  In this example, you'll forward the KSM service on port 8080 to your local machine on port 9999.  The local port is configurable so feel free to choose your own.  Just be careful not to choose something that's already in use.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl port-forward svc/newrelic-bundle-kube-state-metrics -n newrelic 9999:8080\\nForwarding from 127.0.0.1:9999 -> 8080\\nForwarding from [::1]:9999 -> 8080\\n\")), mdx(\"p\", null, \"Open a browser and visit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:9999/metrics\"), \".  You should now see a list of metrics that the KSM service is exposing within the cluster.  As previously mentioned, New Relic's Infrastructure agent uses these metrics as part of its normal data collection process.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://p191.p3.n0.cdn.getcloudapp.com/items/bLudxKED/4368687f-5551-4462-b1b9-066f98ee134b.jpg?v=2017c2177ba2662fc2a06454e133824a\",\n    \"alt\": \"KSM\"\n  })), mdx(\"p\", null, \"Use Control + C to cancel the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubectl port-forward\"), \" command in your terminal.\"), mdx(\"h2\", {\n    \"id\": \"applying-kubernetes-labels\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#applying-kubernetes-labels\",\n    \"aria-label\": \"applying kubernetes labels permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Applying Kubernetes Labels\"), mdx(\"p\", null, \"But what if you've built an application that exposes custom Prometheus metrics?  This is where the Prometheus OpenMetrics Integration (POMI) can provide additional value.  It's able to dynamically collect any Prometheus metric exposed by an endpoint with a specific label or annotation.  The default label is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prometheus.io/scrape=true\"), \", but can be customized in the POMI configuration.\"), mdx(\"p\", null, \"Run the following NRQL query in Query Builder.  You'll see that nothing is returned.  This is because our application that is exposing the custom Prometheus metrics does not have the proper label, therefore, POMI is not able to discover the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/metrics\"), \" endpoint.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"FROM Metric select uniques(metricName) where instrumentation.name = 'nri-prometheus' and clusterName = 'minikube-lab' and metricName like 'python%' since 2 minutes ago\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://p191.p3.n0.cdn.getcloudapp.com/items/qGuRrOy1/f82df250-3ca6-4839-8aab-19650cb55267.jpg?v=b5b4307b9867cb29c0522a008a0ee363\",\n    \"alt\": \"Query Builder\"\n  })), mdx(\"p\", null, \"Use the following command to apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prometheus.io/scrape=true\"), \" label to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prometheus-demo\"), \" service in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"demo\"), \" namespace.  POMI will now be able to discover this service by its label and immediately start collecting the metrics it exposes when the next scrape occurs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl label svc prometheus-demo -n demo prometheus.io/scrape=true\\n\")), mdx(\"p\", null, \"Now re-run the NRQL query and what do you see?\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(It may take 30 seconds due to the polling interval - be patient and run the query a few times if you don't see anything returned immediately)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"FROM Metric select uniques(metricName) where instrumentation.name = 'nri-prometheus' and clusterName = 'minikube-workshop' and metricName like 'python%' since 2 minutes ago\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://p191.p3.n0.cdn.getcloudapp.com/items/7KuAq6qZ/0ac47e14-a90b-4d4b-b6d0-0a321d15b519.jpg?v=68192dbc4f559d64744d1c1d0988be26\",\n    \"alt\": \"Moar metrics\"\n  })), mdx(\"h2\", {\n    \"id\": \"updating-the-pomi-configuration-to-filter-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#updating-the-pomi-configuration-to-filter-metrics\",\n    \"aria-label\": \"updating the pomi configuration to filter metrics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Updating the POMI configuration to Filter Metrics\"), mdx(\"p\", null, \"What if you only want to collect a subset of metrics in the cluster?  Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values.yaml\"), \" file in this directory and find the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nri-prometheus\"), \" section.  In this section, you are configuring the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nri-prometheus\"), \" subchart to filter out all metrics that have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python\"), \" prefix \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"except\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python_my_gauge\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python_my_counter\"), \".  You're also setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scrape_enabled_label\"), \" which tells POMI which resources to scrape metrics from in the cluster.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"nri-prometheus:\\n  config:\\n    scrape_enabled_label: prometheus.io/scrape\\n    transformations:\\n      - description: \\\"Workshop example\\\"\\n        ignore_metrics:\\n          - prefixes:\\n              - python\\n            except:\\n              - python_my_gauge\\n              - python_my_counter\\n\")), mdx(\"h2\", {\n    \"id\": \"upgrading-newrelic-bundle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#upgrading-newrelic-bundle\",\n    \"aria-label\": \"upgrading newrelic bundle permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Upgrading \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"newrelic-bundle\")), mdx(\"p\", null, \"In order to make this configuration active, you'll need to upgrade the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"newrelic-bundle\"), \" again.  Run the command below to apply the changes to your cluster.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ helm upgrade newrelic-bundle newrelic/nri-bundle -n newrelic --reuse-values -f ./values.yaml\\nRelease \\\"newrelic-bundle\\\" has been upgraded. Happy Helming!\\nNAME: newrelic-bundle\\nLAST DEPLOYED: Tue Nov  9 12:57:10 2021\\nNAMESPACE: newrelic\\nSTATUS: deployed\\nREVISION: 2\\nTEST SUITE: None\\n\")), mdx(\"p\", null, \"A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://kubernetes.io/docs/concepts/configuration/configmap/\"\n  }, \"ConfigMap\"), \" is an object used to store non-confidential data in key-value pairs.  Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.\"), mdx(\"p\", null, \"Validate that the changes were made to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"newrelic-bundle-nri-prometheus-config\"), \" ConfigMap by running the command below.  You should see the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transformations\"), \" section.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl describe configmap newrelic-bundle-nri-prometheus-config -n newrelic\\nName:         newrelic-bundle-nri-prometheus-config\\nNamespace:    newrelic\\nLabels:       app.kubernetes.io/instance=newrelic-bundle\\n              app.kubernetes.io/managed-by=Helm\\n              app.kubernetes.io/name=nri-prometheus\\n              app.kubernetes.io/version=2.9.0\\n              helm.sh/chart=nri-prometheus-1.10.0\\nAnnotations:  meta.helm.sh/release-name: newrelic-bundle\\n              meta.helm.sh/release-namespace: newrelic\\n\\nData\\n====\\nconfig.yaml:\\n----\\ncluster_name: minikube-lab\\naudit: false\\ninsecure_skip_verify: false\\nrequire_scrape_enabled_label_for_nodes: true\\nscrape_enabled_label: prometheus.io/scrape\\nscrape_endpoints: false\\nscrape_services: true\\ntransformations:\\n- description: Workshop example\\n  ignore_metrics:\\n  - except:\\n    - python_my_gauge\\n    - python_my_counter\\n    prefixes:\\n    - python\\nverbose: false\\n\")), mdx(\"p\", null, \"Updating a ConfigMap does not always cause the associated pods to automatically restart and pick up the changes.  Restart the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"newrelic-bundle-nri-prometheus-*\"), \" pod so that the new configuration is picked up.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl delete pod newrelic-bundle-nri-prometheus-5544d858fb-rwtf9 -n newrelic\\npod \\\"newrelic-bundle-nri-prometheus-5544d858fb-rwtf9\\\" deleted\\n\")), mdx(\"p\", null, \"After a minute or so, validate that you're now \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only\"), \" seeing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python_my_gauge\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python_my_counter\"), \" metrics in the following NRQL query.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"FROM Metric select uniques(metricName) where instrumentation.name = 'nri-prometheus' and clusterName = 'minikube-workshop' and metricName like 'python%' since 1 minutes ago\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://p191.p3.n0.cdn.getcloudapp.com/items/d5u6Nnxq/3c64cf1b-46fa-4f32-942e-f6289628d279.jpg?v=e588426d95bcf87ddd90b605c74168e3\",\n    \"alt\": \"no more metrics\"\n  })), mdx(\"h2\", {\n    \"id\": \"to-do-better-nrql-query-examples-for-all-metric-types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#to-do-better-nrql-query-examples-for-all-metric-types\",\n    \"aria-label\": \"to do better nrql query examples for all metric types permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"To-Do: Better NRQL Query Examples for all Metric types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reference: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.newrelic.com/docs/infrastructure/prometheus-integrations/view-query-data/translate-promql-queries-nrql/\"\n  }, \"https://docs.newrelic.com/docs/infrastructure/prometheus-integrations/view-query-data/translate-promql-queries-nrql/\"))), mdx(\"h2\", {\n    \"id\": \"resources\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#resources\",\n    \"aria-label\": \"resources permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prometheus Live Demo: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://demo.robustperception.io:9090/consoles/index.html\"\n  }, \"http://demo.robustperception.io:9090/consoles/index.html\"))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"04. Working with the Prometheus OpenMetrics Integration (POMI)"},{"depth":2,"value":"Raw metrics exposed by endpoints"},{"depth":2,"value":"Applying Kubernetes Labels"},{"depth":2,"value":"Updating the POMI configuration to Filter Metrics"},{"depth":2,"value":"Upgrading newrelic-bundle"},{"depth":2,"value":"To-Do: Better NRQL Query Examples for all Metric types"},{"depth":2,"value":"Resources"}]}},"pageContext":{"slug":"/exercises/05_pomi/","prev":{"label":"Helm","link":"/exercises/04_helm"},"next":{"label":"OHIs and HPA","link":"/exercises/06_ohis_hpa"},"repositoryEditUrl":"https://github.com/jpedroschmitz/rocketdocs/tree/main/examples/gatsby-theme-docs/src/docs/exercises/05_pomi.mdx","repositoryProvider":"GitHub"}},
    "staticQueryHashes": ["1954253342","2328931024","2501019404","973074209"]}